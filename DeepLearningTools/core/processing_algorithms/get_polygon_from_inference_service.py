# -*- coding: utf-8 -*-

"""
/***************************************************************************
 DeepLearningTools
                                 A QGIS plugin
 QGIS plugin to aid training Deep Learning Models
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-03
        copyright            : (C) 2020 by Philipe Borba
        email                : philipeborba@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import requests
import json

import processing
from qgis.core import (
    QgsProcessingAlgorithm,
    QgsProcessingParameterCrs,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterNumber,
    QgsProcessingParameterString,
    QgsWkbTypes,
    QgsJsonUtils,
    QgsFeatureSink,
)
from qgis.PyQt.QtCore import QCoreApplication
from qgis.utils import iface


class GetPolygonFromInferenceServiceAlgorithm(QgsProcessingAlgorithm):
    """
    Algorithm to group layers according to primitive, dataset and a category.
    INPUT_LAYERS: list of QgsVectorLayer
    CATEGORY_TOKEN: token used to split layer name
    CATEGORY_TOKEN_INDEX: index of the split list
    OUTPUT: list of outputs
    """

    HOST = "HOST"
    PORT = "PORT"
    IMAGE_PATH = "IMAGE_PATH"
    POLYGONIZE_PARAMETERS = "POLYGONIZE_PARAMETERS"

    def initAlgorithm(self, config):
        """
        Parameter setting.
        """

        self.addParameter(
            QgsProcessingParameterString(
                self.HOST, self.tr("Host"), defaultValue="localhost"
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                self.PORT, self.tr("Port"), minValue=0, defaultValue=5000
            )
        )
        self.addParameter(
            QgsProcessingParameterString(self.IMAGE_PATH, self.tr("Image Path"))
        )
        self.addParameter(
            QgsProcessingParameterString(
                self.POLYGONIZE_PARAMETERS,
                self.tr("Polygonize Parameters"),
                defaultValue="",
                optional=True,
                multiLine=True,
            )
        )
        self.addParameter(QgsProcessingParameterCrs(self.CRS, self.tr()))
        self.addParameter(
            QgsProcessingParameterFeatureSink(self.OUTPUT, self.tr("Output layer"))
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        host = self.parameterAsString(parameters, self.HOST, context)
        port = self.parameterAsInt(parameters, self.PORT, context)
        image_path = self.parameterAsString(parameters, self.IMAGE_PATH, context)
        polygonize_parameters = self.parameterAsString(
            parameters, self.POLYGONIZE_PARAMETERS, context
        )
        crs = self.parameterAsCrs(parameters, self.CRS, context)

        polygonize_parameters = (
            {} if polygonize_parameters == "" else json.loads(polygonize_parameters)
        )

        response = requests.get(
            f"http://{host}:{port}/polygonize",
            params={"image_path": image_path},
            json=polygonize_parameters,
        )

        (sink, dest_id) = self.parameterAsSink(
            parameters, self.OUTPUT, context, [], QgsWkbTypes.Polygon, crs
        )

        if response.status_code == 200:
            for feature in QgsJsonUtils.stringToFeatureList(response.text):
                sink.addFeature(feature, QgsFeatureSink.FastInsert)
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "getpolygonfrominferenceservice"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Get polygons from inference service")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr("Inference Tools")

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "inferencetools"

    def tr(self, string):
        """
        Translates input string.
        """
        return QCoreApplication.translate(
            "GetPolygonFromInferenceServiceAlgorithm", string
        )

    def createInstance(self):
        """
        Creates an instance of this class
        """
        return GetPolygonFromInferenceServiceAlgorithm()
